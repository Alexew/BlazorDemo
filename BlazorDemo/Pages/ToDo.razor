@page "/todo"
@inject HttpClient Http

<h3>To-do list</h3>

@if (items == null)
{
	<p><em>Loading...</em></p>
}
else
{
	<table class="table">
		<thead>
			<tr>
				<th>Created Date</th>
				<th>Description</th>
				<th>Is Complete</th>
				<th></th>
			</tr>
		</thead>
		<tbody>
			@foreach (var item in items)
			{
				<tr>
					<td>@item.CreatedDate</td>
					<td>@item.Description</td>
					<td><input type="checkbox" @bind="item.IsComplete" /> @item.IsComplete</td>
					<td><button class="btn btn-primary" @onclick="() => Remove(item)"><i class="oi oi-trash"></i></button></td>
				</tr>
			}
		</tbody>
	</table>

	<form class="form-inline">
		<div class="form-group mx-sm-3 mb-2">
			<input class="form-control" @bind="newItemDescription" />
		</div>
		<button type="button" class="btn btn-primary mb-2" @onclick="Add">Add</button>
	</form>
}

@code {
	private IList<ToDoItem> items;
	private string newItemDescription;

	protected override async Task OnInitializedAsync()
	{
		items = await Http.GetFromJsonAsync<List<ToDoItem>>("sample-data/todo.json");
	}

	private void Add()
	{
		if (string.IsNullOrEmpty(newItemDescription))
			return;

		items.Add(new ToDoItem
		{
			Id = Guid.NewGuid(),
			CreatedDate = DateTime.Now,
			Description = newItemDescription
		});

		newItemDescription = string.Empty;
	}

	private void Remove(ToDoItem item)
	{
		items.Remove(item);
	}

	public class ToDoItem
	{
		public Guid Id { get; set; }

		public string Description { get; set; }

		public bool IsComplete { get; set; }

		public DateTime CreatedDate { get; set; }
	}
}
